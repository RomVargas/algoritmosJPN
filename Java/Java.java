import java.util.*;
import java.lang.reflect.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.lang.management.*;

public class Java {
    
    public static void main(String[] args) {
        System.out.println("=== GU√çA COMPLETA DE JAVA PARA ENTREVISTAS SENIOR ===\n");
        
        // Conceptos fundamentales
        demonstrateMemoryManagement();
        demonstrateGarbageCollection();
        demonstrateThreadingAndConcurrency();
        demonstrateCollectionsFramework();
        demonstrateGenericsAndTypeErasure();
        demonstrateReflectionAndAnnotations();
        demonstrateExceptionHandling();
        demonstrateDesignPatterns();
        demonstrateJava8Features();
        demonstratePerformanceOptimization();
        demonstrateSecurityAndBestPractices();
        
        // Preguntas de entrevista comunes
        commonInterviewQuestions();
        
        // Ejemplos pr√°cticos
        practicalExamples();
        
        // Casos de uso avanzados
        advancedUseCases();
    }
    
    // ========================================
    // MANEJO DE MEMORIA - HEAP Y STACK
    // ========================================
    public static void demonstrateMemoryManagement() {
        System.out.println("üß† MANEJO DE MEMORIA EN JAVA");
        System.out.println("Java maneja autom√°ticamente la memoria, pero es crucial entender c√≥mo funciona:\n");
        
        // Stack - Variables locales y referencias
        System.out.println("üìö STACK (Pila de ejecuci√≥n):");
        System.out.println("‚Ä¢ Almacena variables locales y referencias");
        System.out.println("‚Ä¢ LIFO (Last In, First Out)");
        System.out.println("‚Ä¢ Cada hilo tiene su propio stack");
        System.out.println("‚Ä¢ Tama√±o fijo, se llena r√°pidamente");
        System.out.println("‚Ä¢ StackOverflowError si se llena\n");
        
        // Heap - Objetos din√°micos
        System.out.println("üóëÔ∏è HEAP (Mont√≥n):");
        System.out.println("‚Ä¢ Almacena objetos creados con 'new'");
        System.out.println("‚Ä¢ Compartido entre todos los hilos");
        System.out.println("‚Ä¢ Tama√±o configurable (-Xmx, -Xms)");
        System.out.println("‚Ä¢ Garbage Collector limpia objetos no referenciados");
        System.out.println("‚Ä¢ OutOfMemoryError si se llena\n");
        
        // Ejemplo pr√°ctico
        System.out.println("üîç EJEMPLO PR√ÅCTICO:");
        System.out.println("public void example() {");
        System.out.println("    int localVar = 42;           // Stack");
        System.out.println("    String str = \"Hello\";       // Stack (referencia) + Heap (objeto)");
        System.out.println("    Object obj = new Object();   // Stack (referencia) + Heap (objeto)");
        System.out.println("    int[] array = new int[1000]; // Stack (referencia) + Heap (array)");
        System.out.println("}");
        
        // M√©taspace (antes PermGen)
        System.out.println("\nüìñ METASPACE:");
        System.out.println("‚Ä¢ Almacena metadatos de clases");
        System.out.println("‚Ä¢ Informaci√≥n de m√©todos, campos, etc.");
        System.out.println("‚Ä¢ Garbage collection autom√°tico");
        System.out.println("‚Ä¢ Tama√±o din√°mico por defecto\n");
        
        // Configuraci√≥n de memoria
        System.out.println("‚öôÔ∏è CONFIGURACI√ìN DE MEMORIA:");
        System.out.println("‚Ä¢ -Xms: Tama√±o inicial del heap");
        System.out.println("‚Ä¢ -Xmx: Tama√±o m√°ximo del heap");
        System.out.println("‚Ä¢ -Xss: Tama√±o del stack por hilo");
        System.out.println("‚Ä¢ -XX:MaxMetaspaceSize: Tama√±o m√°ximo del Metaspace\n");
    }
    
    // ========================================
    // GARBAGE COLLECTOR
    // ========================================
    public static void demonstrateGarbageCollection() {
        System.out.println("‚ôªÔ∏è GARBAGE COLLECTOR (GC)");
        System.out.println("Sistema autom√°tico de limpieza de memoria:\n");
        
        // Tipos de GC
        System.out.println("üîÑ TIPOS DE GARBAGE COLLECTOR:");
        System.out.println("1. Serial GC (-XX:+UseSerialGC):");
        System.out.println("   ‚Ä¢ Un solo hilo, pausa la aplicaci√≥n");
        System.out.println("   ‚Ä¢ Para aplicaciones peque√±as");
        System.out.println("   ‚Ä¢ -XX:+UseSerialGC\n");
        
        System.out.println("2. Parallel GC (-XX:+UseParallelGC):");
        System.out.println("   ‚Ä¢ M√∫ltiples hilos, pausa la aplicaci√≥n");
        System.out.println("   ‚Ä¢ Para aplicaciones de alto throughput");
        System.out.println("   ‚Ä¢ -XX:+UseParallelGC\n");
        
        System.out.println("3. CMS GC (-XX:+UseConcMarkSweepGC):");
        System.out.println("   ‚Ä¢ Concurrente, pausas cortas");
        System.out.println("   ‚Ä¢ Para aplicaciones que requieren baja latencia");
        System.out.println("   ‚Ä¢ Deprecado en Java 9\n");
        
        System.out.println("4. G1 GC (-XX:+UseG1GC):");
        System.out.println("   ‚Ä¢ Generacional, concurrente");
        System.out.println("   ‚Ä¢ Pausas predecibles");
        System.out.println("   ‚Ä¢ Default desde Java 9\n");
        
        System.out.println("5. ZGC (-XX:+UseZGC):");
        System.out.println("   ‚Ä¢ Ultra baja latencia");
        System.out.println("   ‚Ä¢ Pausas < 10ms");
        System.out.println("   ‚Ä¢ Disponible desde Java 11\n");
        
        // Generaciones de memoria
        System.out.println("üìä GENERACIONES DE MEMORIA:");
        System.out.println("‚Ä¢ Young Generation (Eden + Survivor):");
        System.out.println("  - Objetos nuevos");
        System.out.println("  - Minor GC (r√°pido)");
        System.out.println("‚Ä¢ Old Generation:");
        System.out.println("  - Objetos longevos");
        System.out.println("  - Major GC (lento)");
        System.out.println("‚Ä¢ Metaspace:");
        System.out.println("  - Metadatos de clases\n");
        
        // Finalizaci√≥n
        System.out.println("‚ö†Ô∏è FINALIZACI√ìN:");
        System.out.println("‚Ä¢ finalize() est√° deprecado");
        System.out.println("‚Ä¢ Usar try-with-resources o AutoCloseable");
        System.out.println("‚Ä¢ WeakReference, SoftReference, PhantomReference");
        System.out.println("‚Ä¢ System.gc() - sugerencia, no garant√≠a\n");
        
        // Monitoreo
        System.out.println("üìà MONITOREO DEL GC:");
        System.out.println("‚Ä¢ -verbose:gc: Logs b√°sicos");
        System.out.println("‚Ä¢ -XX:+PrintGCDetails: Logs detallados");
        System.out.println("‚Ä¢ JVisualVM, JConsole, JMX");
        System.out.println("‚Ä¢ GarbageCollectorMXBean\n");
    }
    
    // ========================================
    // THREADING Y CONCURRENCIA
    // ========================================
    public static void demonstrateThreadingAndConcurrency() {
        System.out.println("üßµ THREADING Y CONCURRENCIA");
        System.out.println("Java proporciona m√∫ltiples mecanismos para concurrencia:\n");
        
        // Estados de Thread
        System.out.println("üîÑ ESTADOS DE THREAD:");
        System.out.println("‚Ä¢ NEW: Creado pero no iniciado");
        System.out.println("‚Ä¢ RUNNABLE: Ejecut√°ndose o listo para ejecutar");
        System.out.println("‚Ä¢ BLOCKED: Esperando un lock");
        System.out.println("‚Ä¢ WAITING: Esperando indefinidamente");
        System.out.println("‚Ä¢ TIMED_WAITING: Esperando con timeout");
        System.out.println("‚Ä¢ TERMINATED: Completado\n");
        
        // Sincronizaci√≥n
        System.out.println("üîí SINCRONIZACI√ìN:");
        System.out.println("1. synchronized keyword:");
        System.out.println("   ‚Ä¢ M√©todo: bloquea toda la instancia");
        System.out.println("   ‚Ä¢ Bloque: bloquea objeto espec√≠fico");
        System.out.println("   ‚Ä¢ Reentrante: mismo hilo puede adquirir el lock\n");
        
        System.out.println("2. Locks (java.util.concurrent.locks):");
        System.out.println("   ‚Ä¢ ReentrantLock: Lock reentrante");
        System.out.println("   ‚Ä¢ ReadWriteLock: Lock de lectura/escritura");
        System.out.println("   ‚Ä¢ StampedLock: Lock optimista\n");
        
        // Colecciones thread-safe
        System.out.println("üì¶ COLECCIONES THREAD-SAFE:");
        System.out.println("‚Ä¢ ConcurrentHashMap: HashMap thread-safe");
        System.out.println("‚Ä¢ CopyOnWriteArrayList: Lista thread-safe para lecturas");
        System.out.println("‚Ä¢ BlockingQueue: Cola con operaciones bloqueantes");
        System.out.println("‚Ä¢ ConcurrentLinkedQueue: Cola no bloqueante\n");
        
        // Executor Framework
        System.out.println("‚öôÔ∏è EXECUTOR FRAMEWORK:");
        System.out.println("‚Ä¢ ExecutorService: Interfaz para ejecutar tareas");
        System.out.println("‚Ä¢ ThreadPoolExecutor: Pool de hilos configurable");
        System.out.println("‚Ä¢ ScheduledExecutorService: Tareas programadas");
        System.out.println("‚Ä¢ ForkJoinPool: Para tareas dividibles\n");
        
        // Atomic classes
        System.out.println("‚öõÔ∏è CLASES AT√ìMICAS:");
        System.out.println("‚Ä¢ AtomicInteger: int thread-safe");
        System.out.println("‚Ä¢ AtomicLong: long thread-safe");
        System.out.println("‚Ä¢ AtomicReference: referencia thread-safe");
        System.out.println("‚Ä¢ AtomicBoolean: boolean thread-safe\n");
        
        // CompletableFuture
        System.out.println("üöÄ COMPLETABLEFUTURE:");
        System.out.println("‚Ä¢ Programaci√≥n as√≠ncrona");
        System.out.println("‚Ä¢ Chaining de operaciones");
        System.out.println("‚Ä¢ Manejo de excepciones");
        System.out.println("‚Ä¢ Combinaci√≥n de futures\n");
    }
    
    // ========================================
    // FRAMEWORK DE COLECCIONES
    // ========================================
    public static void demonstrateCollectionsFramework() {
        System.out.println("üìö FRAMEWORK DE COLECCIONES");
        System.out.println("Java proporciona una rica biblioteca de estructuras de datos:\n");
        
        // List implementations
        System.out.println("üìã LIST IMPLEMENTATIONS:");
        System.out.println("‚Ä¢ ArrayList: Array din√°mico, O(1) acceso, O(n) inserci√≥n");
        System.out.println("‚Ä¢ LinkedList: Lista enlazada, O(n) acceso, O(1) inserci√≥n");
        System.out.println("‚Ä¢ Vector: ArrayList thread-safe (legacy)");
        System.out.println("‚Ä¢ CopyOnWriteArrayList: Thread-safe para lecturas frecuentes\n");
        
        // Set implementations
        System.out.println("üîç SET IMPLEMENTATIONS:");
        System.out.println("‚Ä¢ HashSet: Hash table, O(1) promedio");
        System.out.println("‚Ä¢ TreeSet: √Årbol rojo-negro, O(log n)");
        System.out.println("‚Ä¢ LinkedHashSet: HashSet con orden de inserci√≥n");
        System.out.println("‚Ä¢ ConcurrentHashMap.newKeySet(): Thread-safe\n");
        
        // Map implementations
        System.out.println("üó∫Ô∏è MAP IMPLEMENTATIONS:");
        System.out.println("‚Ä¢ HashMap: Hash table, O(1) promedio");
        System.out.println("‚Ä¢ TreeMap: √Årbol rojo-negro, O(log n)");
        System.out.println("‚Ä¢ LinkedHashMap: HashMap con orden");
        System.out.println("‚Ä¢ ConcurrentHashMap: Thread-safe");
        System.out.println("‚Ä¢ WeakHashMap: Referencias d√©biles\n");
        
        // Queue implementations
        System.out.println("üé´ QUEUE IMPLEMENTATIONS:");
        System.out.println("‚Ä¢ LinkedList: Queue b√°sica");
        System.out.println("‚Ä¢ PriorityQueue: Cola de prioridad");
        System.out.println("‚Ä¢ ArrayBlockingQueue: Cola bloqueante con array");
        System.out.println("‚Ä¢ LinkedBlockingQueue: Cola bloqueante con lista");
        System.out.println("‚Ä¢ ConcurrentLinkedQueue: Cola no bloqueante\n");
        
        // Comparadores y ordenamiento
        System.out.println("üìä COMPARADORES Y ORDENAMIENTO:");
        System.out.println("‚Ä¢ Comparable: Ordenamiento natural");
        System.out.println("‚Ä¢ Comparator: Ordenamiento personalizado");
        System.out.println("‚Ä¢ Collections.sort(): Ordenamiento estable");
        System.out.println("‚Ä¢ Arrays.sort(): Ordenamiento in-place\n");
    }
    
    // ========================================
    // GENERICS Y TYPE ERASURE
    // ========================================
    public static void demonstrateGenericsAndTypeErasure() {
        System.out.println("üî§ GENERICS Y TYPE ERASURE");
        System.out.println("Los gen√©ricos proporcionan type safety en tiempo de compilaci√≥n:\n");
        
        // Type Erasure
        System.out.println("üßπ TYPE ERASURE:");
        System.out.println("‚Ä¢ Los gen√©ricos se eliminan en tiempo de ejecuci√≥n");
        System.out.println("‚Ä¢ List<String> se convierte en List en bytecode");
        System.out.println("‚Ä¢ Informaci√≥n de tipo se pierde en runtime");
        System.out.println("‚Ä¢ Casting autom√°tico en puntos de uso\n");
        
        // Wildcards
        System.out.println("‚ùì WILDCARDS:");
        System.out.println("‚Ä¢ <?>: Tipo desconocido (solo lectura)");
        System.out.println("‚Ä¢ <? extends T>: T o subtipo de T");
        System.out.println("‚Ä¢ <? super T>: T o supertipo de T");
        System.out.println("‚Ä¢ PECS: Producer Extends, Consumer Super\n");
        
        // Bounded Type Parameters
        System.out.println("üîó BOUNDED TYPE PARAMETERS:");
        System.out.println("‚Ä¢ <T extends Comparable<T>>: T debe implementar Comparable");
        System.out.println("‚Ä¢ <T extends Number>: T debe ser Number o subtipo");
        System.out.println("‚Ä¢ M√∫ltiples bounds: <T extends A & B & C>\n");
        
        // Type Tokens
        System.out.println("üé´ TYPE TOKENS:");
        System.out.println("‚Ä¢ Class<T>: Representa el tipo en runtime");
        System.out.println("‚Ä¢ TypeToken (Gson): Preserva informaci√≥n de tipo");
        System.out.println("‚Ä¢ Reflection: Acceso a informaci√≥n de tipo\n");
    }
    
    // ========================================
    // REFLECTION Y ANNOTATIONS
    // ========================================
    public static void demonstrateReflectionAndAnnotations() {
        System.out.println("üîç REFLECTION Y ANNOTATIONS");
        System.out.println("Permiten inspecci√≥n y manipulaci√≥n din√°mica del c√≥digo:\n");
        
        // Reflection
        System.out.println("ü™û REFLECTION:");
        System.out.println("‚Ä¢ Class<T>: Representa una clase");
        System.out.println("‚Ä¢ Method: Representa un m√©todo");
        System.out.println("‚Ä¢ Field: Representa un campo");
        System.out.println("‚Ä¢ Constructor: Representa un constructor");
        System.out.println("‚Ä¢ Modifier: Informaci√≥n sobre modificadores\n");
        
        // Annotations
        System.out.println("üè∑Ô∏è ANNOTATIONS:");
        System.out.println("‚Ä¢ @Override: Sobrescribe m√©todo de superclase");
        System.out.println("‚Ä¢ @Deprecated: Marca como obsoleto");
        System.out.println("‚Ä¢ @SuppressWarnings: Suprime warnings");
        System.out.println("‚Ä¢ @FunctionalInterface: Interfaz funcional");
        System.out.println("‚Ä¢ Annotations personalizadas\n");
        
        // Annotation Processing
        System.out.println("‚öôÔ∏è ANNOTATION PROCESSING:");
        System.out.println("‚Ä¢ Procesamiento en tiempo de compilaci√≥n");
        System.out.println("‚Ä¢ Generaci√≥n de c√≥digo autom√°tica");
        System.out.println("‚Ä¢ Lombok, MapStruct, etc.");
        System.out.println("‚Ä¢ APT (Annotation Processing Tool)\n");
    }
    
    // ========================================
    // MANEJO DE EXCEPCIONES
    // ========================================
    public static void demonstrateExceptionHandling() {
        System.out.println("‚ö†Ô∏è MANEJO DE EXCEPCIONES");
        System.out.println("Sistema robusto para manejo de errores:\n");
        
        // Jerarqu√≠a de excepciones
        System.out.println("üìä JERARQU√çA DE EXCEPCIONES:");
        System.out.println("‚Ä¢ Throwable: Clase base");
        System.out.println("  ‚îú‚îÄ‚îÄ Error: Errores del sistema (no recuperables)");
        System.out.println("  ‚îÇ   ‚îú‚îÄ‚îÄ OutOfMemoryError");
        System.out.println("  ‚îÇ   ‚îú‚îÄ‚îÄ StackOverflowError");
        System.out.println("  ‚îÇ   ‚îî‚îÄ‚îÄ VirtualMachineError");
        System.out.println("  ‚îî‚îÄ‚îÄ Exception: Excepciones recuperables");
        System.out.println("      ‚îú‚îÄ‚îÄ RuntimeException: No checked");
        System.out.println("      ‚îÇ   ‚îú‚îÄ‚îÄ NullPointerException");
        System.out.println("      ‚îÇ   ‚îú‚îÄ‚îÄ ArrayIndexOutOfBoundsException");
        System.out.println("      ‚îÇ   ‚îî‚îÄ‚îÄ IllegalArgumentException");
        System.out.println("      ‚îî‚îÄ‚îÄ Checked Exceptions: Deben ser manejadas");
        System.out.println("          ‚îú‚îÄ‚îÄ IOException");
        System.out.println("          ‚îú‚îÄ‚îÄ SQLException");
        System.out.println("          ‚îî‚îÄ‚îÄ ClassNotFoundException\n");
        
        // Try-with-resources
        System.out.println("üîß TRY-WITH-RESOURCES:");
        System.out.println("‚Ä¢ Recursos se cierran autom√°ticamente");
        System.out.println("‚Ä¢ Implementa AutoCloseable");
        System.out.println("‚Ä¢ M√∫ltiples recursos en un try");
        System.out.println("‚Ä¢ Excepciones suprimidas\n");
        
        // Best practices
        System.out.println("‚úÖ BEST PRACTICES:");
        System.out.println("‚Ä¢ No capturar Exception gen√©rica");
        System.out.println("‚Ä¢ Usar excepciones espec√≠ficas");
        System.out.println("‚Ä¢ Logging apropiado");
        System.out.println("‚Ä¢ Cleanup en finally o try-with-resources");
        System.out.println("‚Ä¢ No ignorar excepciones\n");
    }
    
    // ========================================
    // PATRONES DE DISE√ëO
    // ========================================
    public static void demonstrateDesignPatterns() {
        System.out.println("üèóÔ∏è PATRONES DE DISE√ëO");
        System.out.println("Soluciones probadas para problemas comunes:\n");
        
        // Creational Patterns
        System.out.println("üè≠ CREATIONAL PATTERNS:");
        System.out.println("‚Ä¢ Singleton: Una sola instancia");
        System.out.println("‚Ä¢ Factory Method: Creaci√≥n delegada");
        System.out.println("‚Ä¢ Abstract Factory: Familias de objetos");
        System.out.println("‚Ä¢ Builder: Construcci√≥n compleja");
        System.out.println("‚Ä¢ Prototype: Clonaci√≥n de objetos\n");
        
        // Structural Patterns
        System.out.println("üèõÔ∏è STRUCTURAL PATTERNS:");
        System.out.println("‚Ä¢ Adapter: Interfaz incompatible");
        System.out.println("‚Ä¢ Bridge: Abstracci√≥n e implementaci√≥n");
        System.out.println("‚Ä¢ Composite: Estructura jer√°rquica");
        System.out.println("‚Ä¢ Decorator: Funcionalidad din√°mica");
        System.out.println("‚Ä¢ Facade: Interfaz simplificada");
        System.out.println("‚Ä¢ Flyweight: Objetos compartidos");
        System.out.println("‚Ä¢ Proxy: Control de acceso\n");
        
        // Behavioral Patterns
        System.out.println("üé≠ BEHAVIORAL PATTERNS:");
        System.out.println("‚Ä¢ Chain of Responsibility: Cadena de handlers");
        System.out.println("‚Ä¢ Command: Encapsular requests");
        System.out.println("‚Ä¢ Iterator: Acceso secuencial");
        System.out.println("‚Ä¢ Mediator: Comunicaci√≥n centralizada");
        System.out.println("‚Ä¢ Observer: Notificaciones");
        System.out.println("‚Ä¢ State: Estados de objeto");
        System.out.println("‚Ä¢ Strategy: Algoritmos intercambiables");
        System.out.println("‚Ä¢ Template Method: Esqueleto de algoritmo");
        System.out.println("‚Ä¢ Visitor: Operaciones en objetos\n");
    }
    
    // ========================================
    // CARACTER√çSTICAS DE JAVA 8+
    // ========================================
    public static void demonstrateJava8Features() {
        System.out.println("üöÄ CARACTER√çSTICAS DE JAVA 8+");
        System.out.println("Funcionalidades modernas de Java:\n");
        
        // Lambda expressions
        System.out.println("Œª LAMBDA EXPRESSIONS:");
        System.out.println("‚Ä¢ Sintaxis concisa para interfaces funcionales");
        System.out.println("‚Ä¢ Captura de variables efectivamente finales");
        System.out.println("‚Ä¢ Method references: Class::method");
        System.out.println("‚Ä¢ Constructor references: Class::new\n");
        
        // Streams
        System.out.println("üåä STREAMS:");
        System.out.println("‚Ä¢ Operaciones funcionales en colecciones");
        System.out.println("‚Ä¢ Lazy evaluation");
        System.out.println("‚Ä¢ Parallel streams");
        System.out.println("‚Ä¢ Collectors para agrupaci√≥n\n");
        
        // Optional
        System.out.println("üì¶ OPTIONAL:");
        System.out.println("‚Ä¢ Contenedor para valores nullables");
        System.out.println("‚Ä¢ M√©todos: orElse, orElseGet, orElseThrow");
        System.out.println("‚Ä¢ M√©todos funcionales: map, flatMap, filter");
        System.out.println("‚Ä¢ Evita NullPointerException\n");
        
        // Default methods
        System.out.println("‚ö° DEFAULT METHODS:");
        System.out.println("‚Ä¢ Implementaci√≥n por defecto en interfaces");
        System.out.println("‚Ä¢ Evoluci√≥n de APIs");
        System.out.println("‚Ä¢ Diamond problem con interfaces");
        System.out.println("‚Ä¢ Reglas de resoluci√≥n\n");
        
        // Date/Time API
        System.out.println("üìÖ DATE/TIME API:");
        System.out.println("‚Ä¢ LocalDate, LocalTime, LocalDateTime");
        System.out.println("‚Ä¢ ZonedDateTime, Instant");
        System.out.println("‚Ä¢ Period, Duration");
        System.out.println("‚Ä¢ DateTimeFormatter\n");
        
        // CompletableFuture
        System.out.println("üöÄ COMPLETABLEFUTURE:");
        System.out.println("‚Ä¢ Programaci√≥n as√≠ncrona mejorada");
        System.out.println("‚Ä¢ Chaining de operaciones");
        System.out.println("‚Ä¢ Combinaci√≥n de futures");
        System.out.println("‚Ä¢ Manejo de excepciones\n");
    }
    
    // ========================================
    // OPTIMIZACI√ìN DE RENDIMIENTO
    // ========================================
    public static void demonstratePerformanceOptimization() {
        System.out.println("‚ö° OPTIMIZACI√ìN DE RENDIMIENTO");
        System.out.println("T√©cnicas para mejorar el rendimiento:\n");
        
        // JVM tuning
        System.out.println("üîß JVM TUNING:");
        System.out.println("‚Ä¢ Heap size: -Xms, -Xmx");
        System.out.println("‚Ä¢ GC selection: -XX:+UseG1GC");
        System.out.println("‚Ä¢ GC tuning: -XX:MaxGCPauseMillis");
        System.out.println("‚Ä¢ JIT compilation: -XX:+TieredCompilation\n");
        
        // Profiling
        System.out.println("üìä PROFILING:");
        System.out.println("‚Ä¢ JVisualVM: Profiler visual");
        System.out.println("‚Ä¢ JProfiler: Profiler comercial");
        System.out.println("‚Ä¢ YourKit: Profiler comercial");
        System.out.println("‚Ä¢ JMH: Microbenchmarking\n");
        
        // Code optimization
        System.out.println("üíª CODE OPTIMIZATION:");
        System.out.println("‚Ä¢ String concatenation: StringBuilder");
        System.out.println("‚Ä¢ Boxing/unboxing: Evitar autoboxing");
        System.out.println("‚Ä¢ Collections: Elegir la correcta");
        System.out.println("‚Ä¢ Caching: Memoizaci√≥n");
        System.out.println("‚Ä¢ Object pooling: Para objetos costosos\n");
        
        // Memory optimization
        System.out.println("üíæ MEMORY OPTIMIZATION:");
        System.out.println("‚Ä¢ Object reuse: Pooling");
        System.out.println("‚Ä¢ Weak references: Para caches");
        System.out.println("‚Ä¢ Off-heap memory: DirectByteBuffer");
        System.out.println("‚Ä¢ Memory leaks: Identificar y corregir\n");
    }
    
    // ========================================
    // SEGURIDAD Y BEST PRACTICES
    // ========================================
    public static void demonstrateSecurityAndBestPractices() {
        System.out.println("üîí SEGURIDAD Y BEST PRACTICES");
        System.out.println("Pr√°cticas recomendadas para c√≥digo seguro:\n");
        
        // Security
        System.out.println("üõ°Ô∏è SEGURIDAD:");
        System.out.println("‚Ä¢ Input validation: Validar entradas");
        System.out.println("‚Ä¢ SQL injection: PreparedStatement");
        System.out.println("‚Ä¢ XSS: Escapar output");
        System.out.println("‚Ä¢ CSRF: Tokens de protecci√≥n");
        System.out.println("‚Ä¢ Authentication: JWT, OAuth");
        System.out.println("‚Ä¢ Authorization: Roles y permisos\n");
        
        // Best practices
        System.out.println("‚úÖ BEST PRACTICES:");
        System.out.println("‚Ä¢ SOLID principles");
        System.out.println("‚Ä¢ DRY (Don't Repeat Yourself)");
        System.out.println("‚Ä¢ KISS (Keep It Simple, Stupid)");
        System.out.println("‚Ä¢ Clean Code: Nombres descriptivos");
        System.out.println("‚Ä¢ Unit testing: Cobertura alta");
        System.out.println("‚Ä¢ Code review: Revisi√≥n de pares");
        System.out.println("‚Ä¢ Documentation: JavaDoc\n");
        
        // Code quality
        System.out.println("üìè CODE QUALITY:");
        System.out.println("‚Ä¢ SonarQube: An√°lisis est√°tico");
        System.out.println("‚Ä¢ Checkstyle: Estilo de c√≥digo");
        System.out.println("‚Ä¢ PMD: Detecci√≥n de problemas");
        System.out.println("‚Ä¢ SpotBugs: Detecci√≥n de bugs\n");
    }
    
    // ========================================
    // PREGUNTAS DE ENTREVISTA COMUNES
    // ========================================
    public static void commonInterviewQuestions() {
        System.out.println("üéØ PREGUNTAS DE ENTREVISTA COMUNES");
        System.out.println("Preguntas t√≠picas en entrevistas de Java Senior:\n");
        
        System.out.println("‚ùì '¬øCu√°l es la diferencia entre == y equals()?'");
        System.out.println("‚úÖ == compara referencias, equals() compara contenido");
        System.out.println("   ‚Ä¢ ==: Comparaci√≥n de identidad");
        System.out.println("   ‚Ä¢ equals(): Comparaci√≥n de igualdad");
        System.out.println("   ‚Ä¢ String pool: Strings literales compartidos\n");
        
        System.out.println("‚ùì '¬øQu√© es la inmutabilidad y por qu√© es importante?'");
        System.out.println("‚úÖ Objetos que no pueden cambiar despu√©s de la creaci√≥n");
        System.out.println("   ‚Ä¢ Thread-safe por defecto");
        System.out.println("   ‚Ä¢ Simplifica programaci√≥n concurrente");
        System.out.println("   ‚Ä¢ String, Integer, BigDecimal son inmutables\n");
        
        System.out.println("‚ùì '¬øC√≥mo funciona el garbage collector?'");
        System.out.println("‚úÖ Sistema autom√°tico de limpieza de memoria");
        System.out.println("   ‚Ä¢ Marca objetos no referenciados");
        System.out.println("   ‚Ä¢ Libera memoria autom√°ticamente");
        System.out.println("   ‚Ä¢ Diferentes algoritmos disponibles");
        System.out.println("   ‚Ä¢ Configurable con par√°metros JVM\n");
        
        System.out.println("‚ùì '¬øCu√°l es la diferencia entre HashMap y ConcurrentHashMap?'");
        System.out.println("‚úÖ Thread-safety y rendimiento");
        System.out.println("   ‚Ä¢ HashMap: No thread-safe, m√°s r√°pido");
        System.out.println("   ‚Ä¢ ConcurrentHashMap: Thread-safe, segmentado");
        System.out.println("   ‚Ä¢ No bloquea toda la tabla");
        System.out.println("   ‚Ä¢ Iterator fail-safe\n");
        
        System.out.println("‚ùì '¬øQu√© es el diamond problem?'");
        System.out.println("‚úÖ Conflicto con herencia m√∫ltiple");
        System.out.println("   ‚Ä¢ Ocurre con default methods");
        System.out.println("   ‚Ä¢ Java resuelve con reglas espec√≠ficas");
        System.out.println("   ‚Ä¢ Debe implementar el m√©todo conflictivo\n");
        
        System.out.println("‚ùì '¬øC√≥mo optimizar√≠as una aplicaci√≥n Java lenta?'");
        System.out.println("‚úÖ Enfoque sistem√°tico:");
        System.out.println("   1. Profiling para identificar bottlenecks");
        System.out.println("   2. Optimizar algoritmos y estructuras de datos");
        System.out.println("   3. Tuning de JVM y GC");
        System.out.println("   4. Optimizar I/O y base de datos");
        System.out.println("   5. Caching y pooling\n");
        
        System.out.println("‚ùì '¬øQu√© patrones de dise√±o has usado?'");
        System.out.println("‚úÖ Ejemplos pr√°cticos:");
        System.out.println("   ‚Ä¢ Singleton: Configuraci√≥n global");
        System.out.println("   ‚Ä¢ Factory: Creaci√≥n de objetos");
        System.out.println("   ‚Ä¢ Observer: Event handling");
        System.out.println("   ‚Ä¢ Strategy: Algoritmos intercambiables");
        System.out.println("   ‚Ä¢ Builder: Construcci√≥n compleja\n");
        
        System.out.println("‚ùì '¬øC√≥mo manejar√≠as una OutOfMemoryError?'");
        System.out.println("‚úÖ Diagn√≥stico y soluci√≥n:");
        System.out.println("   1. Heap dump para an√°lisis");
        System.out.println("   2. Identificar memory leaks");
        System.out.println("   3. Aumentar heap size temporalmente");
        System.out.println("   4. Optimizar uso de memoria");
        System.out.println("   5. Implementar caching inteligente\n");
    }
    
    // ========================================
    // EJEMPLOS PR√ÅCTICOS
    // ========================================
    public static void practicalExamples() {
        System.out.println("üîß EJEMPLOS PR√ÅCTICOS");
        
        // Ejemplo de memory leak
        demonstrateMemoryLeak();
        
        // Ejemplo de concurrencia
        demonstrateConcurrency();
        
        // Ejemplo de generics
        demonstrateGenerics();
        
        // Ejemplo de reflection
        demonstrateReflection();
        
        // Ejemplo de streams
        demonstrateStreams();
        
        // Ejemplo de performance
        demonstratePerformance();
    }
    
    // Ejemplo de memory leak
    public static void demonstrateMemoryLeak() {
        System.out.println("\nüíæ EJEMPLO DE MEMORY LEAK:");
        System.out.println("// Memory leak com√∫n: Listeners no removidos");
        System.out.println("public class MemoryLeakExample {");
        System.out.println("    private static List<EventListener> listeners = new ArrayList<>();");
        System.out.println("    ");
        System.out.println("    public void addListener(EventListener listener) {");
        System.out.println("        listeners.add(listener); // Nunca se remueve");
        System.out.println("    }");
        System.out.println("    ");
        System.out.println("    // Soluci√≥n: Usar WeakHashMap o remover listeners");
        System.out.println("    public void removeListener(EventListener listener) {");
        System.out.println("        listeners.remove(listener);");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Ejemplo de concurrencia
    public static void demonstrateConcurrency() {
        System.out.println("\nüßµ EJEMPLO DE CONCURRENCIA:");
        System.out.println("// Race condition");
        System.out.println("public class Counter {");
        System.out.println("    private int count = 0;");
        System.out.println("    ");
        System.out.println("    public void increment() {");
        System.out.println("        count++; // No thread-safe");
        System.out.println("    }");
        System.out.println("    ");
        System.out.println("    // Soluci√≥n 1: synchronized");
        System.out.println("    public synchronized void incrementSafe() {");
        System.out.println("        count++;");
        System.out.println("    }");
        System.out.println("    ");
        System.out.println("    // Soluci√≥n 2: AtomicInteger");
        System.out.println("    private AtomicInteger atomicCount = new AtomicInteger(0);");
        System.out.println("    public void incrementAtomic() {");
        System.out.println("        atomicCount.incrementAndGet();");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Ejemplo de generics
    public static void demonstrateGenerics() {
        System.out.println("\nüî§ EJEMPLO DE GENERICS:");
        System.out.println("// Generic class");
        System.out.println("public class Box<T> {");
        System.out.println("    private T content;");
        System.out.println("    ");
        System.out.println("    public void set(T content) {");
        System.out.println("        this.content = content;");
        System.out.println("    }");
        System.out.println("    ");
        System.out.println("    public T get() {");
        System.out.println("        return content;");
        System.out.println("    }");
        System.out.println("    ");
        System.out.println("    // Bounded type parameter");
        System.out.println("    public static <T extends Comparable<T>> T max(T a, T b) {");
        System.out.println("        return a.compareTo(b) > 0 ? a : b;");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Ejemplo de reflection
    public static void demonstrateReflection() {
        System.out.println("\nü™û EJEMPLO DE REFLECTION:");
        System.out.println("// Inspecci√≥n din√°mica de clase");
        System.out.println("public class ReflectionExample {");
        System.out.println("    public void inspectClass(String className) {");
        System.out.println("        try {");
        System.out.println("            Class<?> clazz = Class.forName(className);");
        System.out.println("            Method[] methods = clazz.getDeclaredMethods();");
        System.out.println("            Field[] fields = clazz.getDeclaredFields();");
        System.out.println("            ");
        System.out.println("            // Crear instancia din√°micamente");
        System.out.println("            Object instance = clazz.newInstance();");
        System.out.println("            ");
        System.out.println("            // Invocar m√©todo din√°micamente");
        System.out.println("            Method method = clazz.getMethod(\"methodName\");");
        System.out.println("            method.invoke(instance);");
        System.out.println("        } catch (Exception e) {");
        System.out.println("            e.printStackTrace();");
        System.out.println("        }");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Ejemplo de streams
    public static void demonstrateStreams() {
        System.out.println("\nüåä EJEMPLO DE STREAMS:");
        System.out.println("// Operaciones funcionales");
        System.out.println("List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");");
        System.out.println("");
        System.out.println("// Filter y map");
        System.out.println("List<String> upperNames = names.stream()");
        System.out.println("    .filter(name -> name.length() > 3)");
        System.out.println("    .map(String::toUpperCase)");
        System.out.println("    .collect(Collectors.toList());");
        System.out.println("");
        System.out.println("// Reduce");
        System.out.println("int totalLength = names.stream()");
        System.out.println("    .mapToInt(String::length)");
        System.out.println("    .sum();");
        System.out.println("");
        System.out.println("// Grouping");
        System.out.println("Map<Integer, List<String>> grouped = names.stream()");
        System.out.println("    .collect(Collectors.groupingBy(String::length));");
    }
    
    // Ejemplo de performance
    public static void demonstratePerformance() {
        System.out.println("\n‚ö° EJEMPLO DE PERFORMANCE:");
        System.out.println("// String concatenation - Ineficiente");
        System.out.println("String result = \"\";");
        System.out.println("for (int i = 0; i < 1000; i++) {");
        System.out.println("    result += i; // Crea muchos objetos String");
        System.out.println("}");
        System.out.println("");
        System.out.println("// String concatenation - Eficiente");
        System.out.println("StringBuilder sb = new StringBuilder();");
        System.out.println("for (int i = 0; i < 1000; i++) {");
        System.out.println("    sb.append(i); // Reutiliza el mismo objeto");
        System.out.println("}");
        System.out.println("String result = sb.toString();");
        System.out.println("");
        System.out.println("// Boxing/unboxing - Ineficiente");
        System.out.println("Integer sum = 0;");
        System.out.println("for (int i = 0; i < 1000000; i++) {");
        System.out.println("    sum += i; // Autoboxing en cada iteraci√≥n");
        System.out.println("}");
        System.out.println("");
        System.out.println("// Boxing/unboxing - Eficiente");
        System.out.println("int sum = 0;");
        System.out.println("for (int i = 0; i < 1000000; i++) {");
        System.out.println("    sum += i; // Sin autoboxing");
        System.out.println("}");
    }
    
    // ========================================
    // CASOS DE USO AVANZADOS
    // ========================================
    public static void advancedUseCases() {
        System.out.println("\nüöÄ CASOS DE USO AVANZADOS");
        
        // Singleton thread-safe
        demonstrateThreadSafeSingleton();
        
        // Custom annotation processor
        demonstrateCustomAnnotation();
        
        // Custom collector
        demonstrateCustomCollector();
        
        // Custom executor
        demonstrateCustomExecutor();
        
        // Memory monitoring
        demonstrateMemoryMonitoring();
    }
    
    // Singleton thread-safe
    public static void demonstrateThreadSafeSingleton() {
        System.out.println("\nüîí SINGLETON THREAD-SAFE:");
        System.out.println("public class ThreadSafeSingleton {");
        System.out.println("    private static volatile ThreadSafeSingleton instance;");
        System.out.println("    private static final Object lock = new Object();");
        System.out.println("    ");
        System.out.println("    private ThreadSafeSingleton() {}");
        System.out.println("    ");
        System.out.println("    public static ThreadSafeSingleton getInstance() {");
        System.out.println("        if (instance == null) {");
        System.out.println("            synchronized (lock) {");
        System.out.println("                if (instance == null) {");
        System.out.println("                    instance = new ThreadSafeSingleton();");
        System.out.println("                }");
        System.out.println("            }");
        System.out.println("        }");
        System.out.println("        return instance;");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Custom annotation
    public static void demonstrateCustomAnnotation() {
        System.out.println("\nüè∑Ô∏è CUSTOM ANNOTATION:");
        System.out.println("@Retention(RetentionPolicy.RUNTIME)");
        System.out.println("@Target(ElementType.METHOD)");
        System.out.println("public @interface LogExecutionTime {");
        System.out.println("    String value() default \"\";");
        System.out.println("}");
        System.out.println("");
        System.out.println("// Uso con reflection");
        System.out.println("public class LoggingAspect {");
        System.out.println("    public static Object logExecutionTime(Method method, Object[] args) {");
        System.out.println("        long start = System.currentTimeMillis();");
        System.out.println("        Object result = method.invoke(target, args);");
        System.out.println("        long end = System.currentTimeMillis();");
        System.out.println("        System.out.println(method.getName() + \" took \" + (end - start) + \"ms\");");
        System.out.println("        return result;");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Custom collector
    public static void demonstrateCustomCollector() {
        System.out.println("\nüì¶ CUSTOM COLLECTOR:");
        System.out.println("public class CustomCollector {");
        System.out.println("    public static <T> Collector<T, ?, Map<String, List<T>>>");
        System.out.println("            groupByFirstLetter() {");
        System.out.println("        return Collector.of(");
        System.out.println("            HashMap::new,");
        System.out.println("            (map, item) -> {");
        System.out.println("                String key = String.valueOf(item.toString().charAt(0));");
        System.out.println("                map.computeIfAbsent(key, k -> new ArrayList<>()).add(item);");
        System.out.println("            },");
        System.out.println("            (map1, map2) -> {");
        System.out.println("                map2.forEach((k, v) -> map1.merge(k, v, (v1, v2) -> {");
        System.out.println("                    v1.addAll(v2);");
        System.out.println("                    return v1;");
        System.out.println("                }));");
        System.out.println("                return map1;");
        System.out.println("            }");
        System.out.println("        );");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Custom executor
    public static void demonstrateCustomExecutor() {
        System.out.println("\n‚öôÔ∏è CUSTOM EXECUTOR:");
        System.out.println("public class CustomExecutor {");
        System.out.println("    private final ExecutorService executor;");
        System.out.println("    private final BlockingQueue<Runnable> queue;");
        System.out.println("    ");
        System.out.println("    public CustomExecutor(int corePoolSize, int maxPoolSize) {");
        System.out.println("        this.queue = new LinkedBlockingQueue<>(1000);");
        System.out.println("        this.executor = new ThreadPoolExecutor(");
        System.out.println("            corePoolSize, maxPoolSize,");
        System.out.println("            60L, TimeUnit.SECONDS,");
        System.out.println("            queue,");
        System.out.println("            new ThreadPoolExecutor.CallerRunsPolicy()");
        System.out.println("        );");
        System.out.println("    }");
        System.out.println("    ");
        System.out.println("    public <T> CompletableFuture<T> submit(Callable<T> task) {");
        System.out.println("        return CompletableFuture.supplyAsync(() -> {");
        System.out.println("            try {");
        System.out.println("                return task.call();");
        System.out.println("            } catch (Exception e) {");
        System.out.println("                throw new CompletionException(e);");
        System.out.println("            }");
        System.out.println("        }, executor);");
        System.out.println("    }");
        System.out.println("}");
    }
    
    // Memory monitoring
    public static void demonstrateMemoryMonitoring() {
        System.out.println("\nüìä MEMORY MONITORING:");
        System.out.println("public class MemoryMonitor {");
        System.out.println("    public static void printMemoryInfo() {");
        System.out.println("        Runtime runtime = Runtime.getRuntime();");
        System.out.println("        long totalMemory = runtime.totalMemory();");
        System.out.println("        long freeMemory = runtime.freeMemory();");
        System.out.println("        long usedMemory = totalMemory - freeMemory;");
        System.out.println("        ");
        System.out.println("        System.out.println(\"Total Memory: \" + totalMemory / 1024 / 1024 + \" MB\");");
        System.out.println("        System.out.println(\"Used Memory: \" + usedMemory / 1024 / 1024 + \" MB\");");
        System.out.println("        System.out.println(\"Free Memory: \" + freeMemory / 1024 / 1024 + \" MB\");");
        System.out.println("        ");
        System.out.println("        // GC MXBean");
        System.out.println("        List<GarbageCollectorMXBean> gcBeans = ManagementFactory.getGarbageCollectorMXBeans();");
        System.out.println("        for (GarbageCollectorMXBean gcBean : gcBeans) {");
        System.out.println("            System.out.println(gcBean.getName() + \": \" + gcBean.getCollectionCount());");
        System.out.println("        }");
        System.out.println("    }");
        System.out.println("}");
    }
}
